Var let const
var --> es5
let, const --> es6
var scope is limited in the function
let & const are limited to the braces
for(var i =0, i<5, i++){
console.log(i);
}
console.log(i);
here the browser will add the second console stmt too but if let or const is used it gives an error
var adds itself to the window object, let & const doesn't

stack --> first in first out

heap memory -->it is used to store the middle calculations that occur before the final answer

Execution context ---> It is an imaginary container that is created when a function is called. It contains variables, function & it's lexical environment.

Lexical environment ---> It defines the scope of the function & variables basically tells the scope & scope chain. a child can always access it's parent properties while a parent can't access the child's properties

hoisting (difference b/w not-defined & undefined)

Types in js
primitives & reference
reference are anything that are stored in ()[]{}
u cannot directly copy a reference value
var a = 12;  --->primitives
var b = [45,56];  ---.>reference
var c = b;  --> c has b's element so any changes in c will reflect in a 
c.pop();  --> pop removes the last element

copying reference values ---> if it's an array than [...var name], for an object {...var name}
... are called as spread not less than 3 or more than 3

conditionals ---> if else, else-if block
for ---> for(start; end; change){}
forEach ---> it is used in acse of an array, it doesn't make any changes in the array rather makes changes in the copy of the array
a.forEach(val){
console.log(val+2);}
where a is the array
forin ---> used in case of objects
for (var key in obj){
console.log(key);
console.log(obj[key]);
console.log(key, obj[key]);

while ---> while(true/false){}

truthy & falsy
Falsy ---> 0 false undefined null NaN document.all
everything else comes in truthy

functions---> 1. when u want to run the code at a specific time
2. when u want to reuse the code block
3. when u want to run the code with different data
arguments & parameters ---> args are real values which we give while calling the func & params are variables in which the args values are stored

call back functions---> it is a normal function that is given a time after which it has to run
setTimeout(function(){
console.log("run after 2 secs");
}, 2000);
where 2000 is the value in miliseconds so 2000 means it will run after 2 secs

first class functions ---> functions can be stored in variables & used
function abcd(a){
a();
}
abcd(function(){console.log("hey");})

arrays aren't treated as arrays in js rather they are treated as object & u can even use a -ve index in js

deleting values in an object
var a = {
name:"hello",
age : 24}
delete a.age;
delete a.name;

array ---> group of values
push ---> adds an item at the end of array
pop ---> removes an item at the end of array
unshift ---> adds an item at the start of the array
shift ---> removes an item at the start of  the array
splice ---> remove an item at the specific index
arr.splice(2,1) ---> will remove an item at the 2nd index, if u wnat to remove more than 1 change the no. 1 to desired no.
object ---> holding details in a key value pair
properties ---> var a ={ color: blue, type: a} where color & type are properties
method ---> any property whose value is equal to a function var a = {price: function(){}}
